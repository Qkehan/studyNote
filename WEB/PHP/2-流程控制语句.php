<?php
    header("Content-type:text/html;charset=utf-8");
    
    echo '欢迎您！！';
    echo date("Y-m-d H:i:s")."<br>";  
    echo '【2-流程控制语句】'."<br>";  
    echo "当前文件的路径为：".__FILE__.'<br>';    //获取当前文件路径  
    
    //
    //
    //**************【条件判断语句】************
    //条件判断语句，就是短语句中的条件进行判断，进行通过不同的判断语句结果执行不同语句。   
    //PHP中常用的选择结构语句有 if、if...else...、if...elseif...else、 switch语。     
    //-------【1、if语句：】--------
    // if语句也称为单分支语句，当满足某种条件时，就进行某种处理。语法：
    /*
    if(判断条件){
        代码块；   
    }
    */
    // 判断条件是一个布尔值，当该值为true时，执行“{}”中的代码块，否则不进行任何处理。  
    // 当代码块中只有一条语句时，"{}"可以省略。    
    //
    //----------【2、if...else语句】--------------   
    // if...else语句也称为双分支语句，当满足某种条件时，就进行某种处理，否则进行另一种处理。语法：    
    /*
    if(判断条件){
        代码块1；  
    } else {
        代码块2；  
    }
    */
    // 当判断条件为true时，执行代码块1。   
    // 当判断条件为false时，执行代码块2。   
    //
    $hanjia=30;   
    if($hanjia==30){
        echo "寒假放一个月，就出去玩吧！<br>";
    } else {
        echo "那就在家学习！！<br>"; 
    }
    //
    //------------【3、if...elseif...else语句】----------------   
    // if...elseif...else语句也称为多分支语句，用于对多种条件进行判断，并进行处理。语法：     
    /*
    if(条件1){
        代码块1；
    }elseif(){
        代码块2；
    }elseeif(){
        代码块n；
    }else{
        代码块n+1；
    }
    */
    $score = 88;   
    if($score >= 90){
        echo "A<br>";
    }elseif($score >= 80){
        echo "B<br>";
    }elseif($score >= 70){
        echo "C<br>"; 
    }elseif($score >= 60){
        echo "D<br>"; 
    }else{
        echo "Z<br>";
    }  
    //
    // 不判断条件1为true时，则执行代码块1。  
    // 否则继续判断条件2，若为true，则执行代码段2。  
    // 以此类推，若所有条件都为false，则执行代码段n+1。    
    //
    //------------【4、switch语句】------------------
    // switch语句也是多分支语句，它的好处就是使用代码更加清晰简洁、便于读者阅读。语法：      
    /*
    switch(表达式){
        case值1：代码块1；break；  
        case值2：代码块2；break；  
        defaultL： 代码块n;  
    }
    */
    // 首先计算表达式的值（该值不能为数组或对象）。  
    // 然后将获得的值与case中的值依次比较，若想等，则执行case后的对应代码块；若没有匹配的值，则执行default中的代码块。   
    // 最后，当遇到break语句时，跳出switch语句。   
    //
    $score = 89;
    switch((int)($score/10)){
        case 10:
        case 9: echo "A<br>"; break;  
        case 8: echo "B<br>"; break; 
        case 7: echo "C<br>"; break; 
        case 6: echo "D<br>"; break; 
        default: echo "Z<br>";   
    }
    //
    //
    //************【循环控制语句】**************
    // 循环控制语句是指能够按照东烧钱条件重复执行某段功能代码结构。循环控制语句分为以下3种：    
    //------【1、while循环语句】--------  
    // 1、所谓循环语句，就是可以实现一段代码重复执行。而while循环语句，就是根据循环条件来判断是否重复执行这一段代码。语法：      
    /*
    while(循环条件){
        执行语句
        ...
    }
    */
    // “{}”中的执行语句称为循环体。   
    // 当循环条件为true时，则执行循环体。  
    // 当循环条件为false时，结束整个循环。  
    // 当循环条件永远为true时，会出现死循环。    
    //
    $num = 1;  
    while($num != 1){
        echo "数字为1<br>";   //没有  
    }; 
    //
    //-------【2、do...while...语句】-----------  
    // 2、do...while与while类似，但是当循环条件为false的情况下，while语句会结束循环，而do...while语句依然会在执行一次。语法：     
    /*
    do{
        执行语句
        ...
    }while(判对条件)；  
    */
    // 首先执行do后面“{}”中的循环体。    
    // 然后再判断循环条件，为循环条件为true时，继续执行循环体。   
    // 当循环条件为false时，结束本次循环。   
    //
    do{
        echo "数字为1<br>";
    }while($num != 1);
    //
    //----------【3、for循环语句】----------  
    // 3、for循环语句能够按照已知的循环次数进行循环操作，主要应用多条件情况下的循环操作。语法：    
    /*
    for(表达式1；表达式2；表达式3){
        执行语句
        ...
    }
    */
    // 表达式1用于初始化。  
    // 表达式2用于判断循环条件。  
    // 表达式3用于改变表达式1的值。   
    //
    /*
    利用循环语句编程输出以下字符： 
    # 1
    ## 4 
    ### 9 
    #### 16 
    ##### 25 
    ###### 36 
    ####### 49
    */
    $num1 = 0; 
    for($i=0;$i<=100;$i++){
        $sum=$sum+$i;  
    }
    echo "1到100的和为：".$sum."<br>";  
    //
    $x = "#";
    $y = "";
    for($i=1;$i<=7;$i++){
        echo ($y = $y.$x)." ".($i*$i);
        echo "<br>";
    }
    //
    //
    //打印金字塔   1\3\5\7\9阶,居中   
    //首先5个空格，递减     
    $step = 9; 
    for($i=1;$i<=$step;$i++){
        //空格   
        for($j=1;$j<= $step-$i;$j++){
            echo "&ensp;";  
        }
        //金字塔  
        for($k=1;$k<=$i*2-1;$k++){
            echo "*";  
        }
        echo "<br>";   
    };  
    //
    //
    //****************【跳转语句 & 终止语句】*******************
    // 跳转语句用于实现循环执行过程中程序流程的跳转，PHP中常用的跳转语句有break和continue语句。    
    //
    //---------【continue语句】----------
    // 在执行continue语句后，程序将结束本次循环的执行，并开始下一轮循环的执行操作。示例：      
    for($i=1;$i<=10;$i++){
        if($i == 6){
            continue;  
        } echo $i." ";   //1234578910
    }
    echo "<br>";  
    //
    //----------【break语句】-----------
    // break语句可以终止当前的循环，包括while、do...while、for和swith在内的所有控制语句。示例：   
    for($i=1;$i<=10;$i++){
        if($i == 6){
            break;  
        } echo $i." ";  //12345  
    }
    echo "<br>";  
    //
    //-----------【exit语句】------------
    // exit语句的作用是终止整个PHP程序的执行，在exit语句后面的所有PHP代码都不会执行。格式如下：   
    /* void exit([string message]); */   
    // 参数message是可选参数，用来输出字符串信息，然后终止PHP程序的执行。   
    //
    //
    //**********【小结】**********
    //
    /*
    ----------简单描述echo和 print 以及print_r区别--------------
    1.echo 和 print 的区别
    共同点：首先echo 和 print 都不是严格意义上的函数，他们都是 语言结构;他们都只能输出 字符串，整型跟int型浮点型数据。不能打印复合型和资源型数据；
    而区别是：echo 可以连续输出多个变量，而print只能一次输出一个变量。print打印的值能直接复制给一个变量，如 $a = print “123”;
    而echo 不可以，它没有像函数的行为，所以不能用于函数的上下文。在使用时，echo() 函数比 print()速度稍快。
    2.var_dump()和print_r()的区别
    共同点：两者都可以打印数组，对象之类的复合型变量。
    区别：print_r() 只能打印一些易于理解的信息，且print_r()在打印数组时，会将把数组的指针移到最后边，使用 reset() 可让指针回到开始处。 而var_dump()不但能打印复合类型的数据，还能打印资源类型的变量。且var_dump()输出的信息则比较详细，一般调试时用得多。
    */
?>